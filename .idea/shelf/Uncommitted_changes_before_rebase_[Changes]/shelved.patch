Index: src/ainnova/scheduler/RequestTask.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace ainnova\\scheduler;\r\n\r\nuse pocketmine\\scheduler\\AsyncTask;\r\nuse pocketmine\\Server;\r\nuse Closure;\r\nuse ainnova\\utils\\Client;\r\n\r\nclass RequestTask extends AsyncTask {\r\n\tprivate string $message;\r\n\tprivate Client $api;\r\n\tprivate Closure $callback;\r\n\tprivate int $time;\r\n\r\n\t/**\r\n\t * RequestTask constructor\r\n\t *\r\n\t * @param string $message\r\n\t * @param Client $api\r\n\t * @param Closure $callback\r\n\t */\r\n\tpublic function __construct(string $message, Client $api, Closure $callback) {\r\n\t\t$this->message = $message;\r\n\t\t$this->api = $api;\r\n\t\t$this->callback = $callback;\r\n\t\t$this->time = time();\r\n\t}\r\n\r\n\tpublic function onRun(): void {\r\n\t\t$data = [\r\n\t\t\t'model' => $this->api->getModel(),\r\n\t\t\t'message' => $this->message\r\n\t\t];\r\n\r\n\t\t$options = [\r\n\t\t\t'http' => [\r\n\t\t\t\t'header' => 'Content-Type: application/json\\r\\n' .\r\n\t\t\t\t\t'Authorization: Bearer ' . $this->api->getToken() . '\\r\\n',\r\n\t\t\t\t'method' => 'POST',\r\n\t\t\t\t'content' => json_encode($data)\r\n\t\t\t]\r\n\t\t];\r\n\r\n\t\t$context = stream_context_create($options);\r\n\t\t$result = @file_get_contents($this->api->getUrl(), false, $context);\r\n\r\n\t\t$response = $result !== false ? json_decode($result, true) : ['error' => 'Failed to get response from API'];\r\n\t\t$response['time'] = $this->time;\r\n\r\n\t\tif (isset($response['message']) && is_string($response['message'])) {\r\n\t\t\t$response['message'] = preg_replace('/[^\\p{L}\\p{N}\\p{P}\\s]/u', '', $response['message']);\r\n\t\t}\r\n\r\n\t\t$this->setResult($response);\r\n\t}\r\n\r\n\t/**\r\n\t * Called when the task is completed\r\n\t *\r\n\t * @param Server $server\r\n\t */\r\n\tpublic function onCompletion(Server $server): void {\r\n\t\t($this->callback)($server, $this->getResult());\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ainnova/scheduler/RequestTask.php b/src/ainnova/scheduler/RequestTask.php
--- a/src/ainnova/scheduler/RequestTask.php	(revision e5cf20fa2a0b2c3b86c7aa071e90f2f2126d59a0)
+++ b/src/ainnova/scheduler/RequestTask.php	(date 1730607318919)
@@ -33,19 +33,30 @@
 			'message' => $this->message
 		];
 
-		$options = [
-			'http' => [
-				'header' => 'Content-Type: application/json\r\n' .
-					'Authorization: Bearer ' . $this->api->getToken() . '\r\n',
-				'method' => 'POST',
-				'content' => json_encode($data)
-			]
-		];
+		$ch = curl_init($this->api->getUrl());
+		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
+		curl_setopt($ch, CURLOPT_HTTPHEADER, [
+			'Content-Type: application/json',
+			'Authorization: Bearer ' . $this->api->getToken()
+		]);
+		curl_setopt($ch, CURLOPT_POST, true);
+		curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
 
-		$context = stream_context_create($options);
-		$result = @file_get_contents($this->api->getUrl(), false, $context);
+		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
+		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
 
-		$response = $result !== false ? json_decode($result, true) : ['error' => 'Failed to get response from API'];
+		$result = curl_exec($ch);
+		$error = curl_error($ch);
+		curl_close($ch);
+
+		if ($result === false) {
+			$response = ['error' => 'Error: ' . $error];
+		} else {
+			$response = json_decode($result, true);
+			if (json_last_error() !== JSON_ERROR_NONE) {
+				$response = ['error' => 'Failed to decode JSON response'];
+			}
+		}
 		$response['time'] = $this->time;
 
 		if (isset($response['message']) && is_string($response['message'])) {
Index: src/ainnova/Main.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace ainnova;\r\n\r\nuse ainnova\\utils\\Logger;\r\nuse pocketmine\\plugin\\PluginBase;\r\nuse pocketmine\\Server;\r\n\r\nclass Main extends PluginBase {\r\n\r\n\tprivate static ?Main $instance = null;\r\n\tprivate ?Client $api = null;\r\n\r\n\t/**\r\n\t * Get Main class\r\n\t *\r\n\t * @return Main|null\r\n\t */\r\n\tpublic static function getInstance(): ?Main {\r\n\t\treturn self::$instance;\r\n\t}\r\n\r\n\tpublic function onEnable(): void {\r\n\t\tself::$instance = $this;\r\n\t\tLogger::info('AInnova plugin loaded successfully');\r\n\t}\r\n\r\n\t/**\r\n\t * Set the API token\r\n\t *\r\n\t * @param string $token\r\n\t */\r\n\tpublic function setToken(string $token): void {\r\n\t\t$this->api->setToken($token);\r\n\t}\r\n\r\n\t/**\r\n\t * Set the AI model\r\n\t *\r\n\t * @param string $model\r\n\t */\r\n\tpublic function setModel(string $model): void {\r\n\t\t$this->api->setModel($model);\r\n\t}\r\n\r\n\t/**\r\n\t * Set the API URL\r\n\t *\r\n\t * @param string $url\r\n\t */\r\n\tpublic function setApiUrl(string $url): void {\r\n\t\tif ($this->api !== null) {\r\n\t\t\t$this->api->setUrl($url);\r\n\t\t\tLogger::info(\"API URL set to {$url}\");\r\n\t\t} else {\r\n\t\t\tLogger::error(\"API client not initialized\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Send a message to the AI\r\n\t *\r\n\t * @param string $message\r\n\t * @param Closure $callback\r\n\t */\r\n\tpublic function sendMessage(string $message, Closure $callback): void {\r\n\t\t$this->getServer()->getScheduler()->scheduleAsyncTask(new RequestTask($message, $this->api, $callback));\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ainnova/Main.php b/src/ainnova/Main.php
--- a/src/ainnova/Main.php	(revision e5cf20fa2a0b2c3b86c7aa071e90f2f2126d59a0)
+++ b/src/ainnova/Main.php	(date 1730607318919)
@@ -3,8 +3,11 @@
 namespace ainnova;
 
 use ainnova\utils\Logger;
+use ainnova\utils\Client;
+use ainnova\scheduler\RequestTask;
 use pocketmine\plugin\PluginBase;
 use pocketmine\Server;
+use Closure;
 
 class Main extends PluginBase {
 
@@ -22,6 +25,9 @@
 
 	public function onEnable(): void {
 		self::$instance = $this;
+		
+		$this->api = new Client();
+
 		Logger::info('AInnova plugin loaded successfully');
 	}
 
@@ -31,7 +37,11 @@
 	 * @param string $token
 	 */
 	public function setToken(string $token): void {
-		$this->api->setToken($token);
+		if ($this->api !== null) {
+			$this->api->setToken($token);
+		} else {
+			Logger::error("API client not initialized");
+		}
 	}
 
 	/**
@@ -40,7 +50,11 @@
 	 * @param string $model
 	 */
 	public function setModel(string $model): void {
-		$this->api->setModel($model);
+		if ($this->api !== null) {
+			$this->api->setModel($model);
+		} else {
+			Logger::error("API client not initialized");
+		}
 	}
 
 	/**
